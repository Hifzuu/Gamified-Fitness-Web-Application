@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> UserManager
@{
    var current = ViewContext.RouteData.Values["controller"] as string;
    var actionCurrent = ViewContext.RouteData.Values["action"] as string;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Gym Management Web Application</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href='https://fonts.googleapis.com/css?family=Poppins' rel='stylesheet'>
    <link href="https://fonts.cdnfonts.com/css/writing-signature" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


</head>

<body>
    <aside class="sidebar-nav">
        @if (User.Identity.IsAuthenticated)
        {
            <a class="navbar-brand" href="/Home/Index">
                <img src="/Images/newlogo.png" alt="Fit.Me Logo" style="max-width: 200px; max-height: 50px;" />
            </a>
            <ul class="side-nav nav-pills flex-column">
                <li class="header fs-10 text-uppercase text-light">General</li>
                <li class="btn-style @(current == "Dashboard" && actionCurrent == "Index" ? "active" : "")">
                    <a href="/Dashboard/Index">
                        <img class="nav-img" src="/Images/dashboard.png" alt="Dashboard Icon" />
                        <span class="icon-text">Dashboard</span>
                    </a>
                </li>
                <li class="btn-style @(current == "Workout" && (actionCurrent == "Index" || actionCurrent == "Details") ? "active" : "")">
                    <a href="/Workout/Index">
                        <img class="nav-img" src="/Images/weights.png" alt="Workout Icon" />
                        <span class="icon-text">Workouts</span>
                    </a>
                </li>
                <li class="btn-style @(current == "Challenge" && actionCurrent == "Index" ? "active" : "")">
                    <a href="/Challenge/Index">
                        <img class="nav-img" src="/Images/target.png" alt="Challenge Icon" />
                        <span class="icon-text">Challenges</span>
                    </a>
                </li>
                <li class="btn-style @(current == "Raffle" && actionCurrent == "Index" ? "active" : "")">
                    <a href="/Raffle/Index">
                        <img class="nav-img" src="/Images/event-ticket.png" alt="Raffle Icon" />
                        <span class="icon-text">Raffles</span>
                    </a>
                </li>
                <li class="btn-style @(current == "Clan" && actionCurrent == "Index" ? "active" : "")">
                    <a href="/Clan/Index">
                        <img class="nav-img" src="/Images/team.png" alt="Clan Icon" />
                        <span class="icon-text">Clan</span>
                    </a>
                </li>
                @* <li class="btn-style @(current == "Achievement" && actionCurrent == "Index" ? "active" : "")">
                    <a href="/Achievement/Index">
                        <img class="nav-img" src="/Images/badge.png" alt="Achievement Icon" />
                        <span class="icon-text">Achievements</span>
                    </a>
                </li> *@
                <li class="header fs-10 text-uppercase text-light" style="margin-top:50px;">More</li>
               
                <li class="btn-style">
                    <a id="openFeedbackModal" class="btn btn-primary" data-toggle="modal" data-target="#feedbackModal" data-backdrop="static">
                        <img src="/Images/feedback.png" alt="Feedback Icon" class="nav-img" style="margin-right: 10px;">
                        <span class="icon-text">Give Feedback</span>
                    </a>
                </li>

            </ul>
        }

    </aside>

    <div class="modal fade" id="feedbackModal" tabindex="-1" role="dialog" aria-labelledby="feedbackModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="feedbackModalLabel">Feedback Form</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="feedbackForm">
                        <div class="form-group">
                            <label for="name">Name:</label>
                            <input type="text" class="form-control" id="name" name="name" value="@User.Identity.Name" readonly disabled>
                        </div>
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <input type="email" class="form-control" id="email" name="email" value="@UserManager.GetUserAsync(User).Result.Email" readonly disabled>
                        </div>

                        <div class="form-group">
                            <label for="feedbackType">Feedback Type:</label>
                            <select class="form-control" id="feedbackType" name="feedbackType">
                                <option value="bug">Bug Report</option>
                                <option value="suggestion">Suggestion</option>
                                <option value="compliment">Compliment</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="feedbackDetails">Feedback Details:</label>
                            <textarea class="form-control" id="feedbackDetails" name="feedbackDetails" rows="3"></textarea>
                        </div>
                        <button type="button" class="btn btn-primary" onclick="submitFeedback()">Submit Feedback</button>
                    </form>
                </div>
            </div>
        </div>
    </div>


    <script>
        // Function to open feedback modal
        document.getElementById('openFeedbackModal').addEventListener('click', function () {
            document.getElementById('feedbackModal').classList.add('show');
            document.body.classList.add('modal-open');
            document.getElementById('feedbackModal').style.display = 'block';
        });

        // Function to close feedback modal
        function closeModal() {
            document.getElementById('feedbackModal').classList.remove('show');
            document.body.classList.remove('modal-open');
            document.getElementById('feedbackModal').style.display = 'none';

            // Remove the modal backdrop
            const modalBackdrops = document.getElementsByClassName('modal-backdrop');
            while (modalBackdrops.length > 0) {
                modalBackdrops[0].parentNode.removeChild(modalBackdrops[0]);
            }
        }

        // Function to submit feedback
        async function submitFeedback() {
            const formData = {
                name: document.getElementById('name').value,
                email: document.getElementById('email').value,
                feedbackType: document.getElementById('feedbackType').value,
                feedbackDetails: document.getElementById('feedbackDetails').value,
            };

            try {
                const response = await fetch('/Feedback/SubmitFeedback', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(formData),
                });

                if (response.ok) {
                    closeModal();
                    Swal.fire({
                        icon: 'success',
                        title: 'Feedback Submitted!',
                        text: 'Thank you for your feedback.',
                    });
                } else {
                    const errorMessage = await response.text();
                    Swal.fire({
                        icon: 'error',
                        title: 'Submission Failed',
                        text: errorMessage || 'Failed to submit feedback. Please try again.',
                    });
                }
            } catch (error) {
                console.error(error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An unexpected error occurred. Please try again.',
                });
            }
        }
    </script>


</body>
</html>