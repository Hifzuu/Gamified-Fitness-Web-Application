@using Microsoft.AspNetCore.Identity
@model ProjectWebApp.Models.DashboardViewModel
@inject UserManager<ApplicationUser> UserManager
@{
    ViewData["Title"] = "Dashboard";
    var user = await UserManager.GetUserAsync(User);
    var firstName = user?.FirstName;
    var lastName = user?.LastName;
    var email = user?.Email;
    var goalWeight = user?.GoalWeight;
    var rewardColors = new Dictionary<int, string>
    {
        { 1, "#8D6747" },   // Bronze (7 days)
        { 2, "#C7C7C7" },   // Silver (14 days)
        { 3, "#FFD700" },   // Gold (30 days)
        { 4, "#7EFFEF" },   // Platinum (60 days)
        { 5, "#4199FF" },   // Diamond (90 days)
        { 6, "#6741FF" },   // Master (180 days)
        { 7, "#B25CFF " },   // Champion (270 days)
        { 8, "#FF389F " }    // Legend (365 days)
        // Add more as needed
    };
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - ProjectWebApp</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/site.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.min.js"></script>
</head>

<style>
    .leaderboard-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: white;
        padding: 12px;
        margin: 2px 0;
        border-radius: 20px;
    }

        .leaderboard-item:first-child {
            border-top-left-radius: 20px;
            border-top-right-radius: 20px;
        }

        .leaderboard-item:last-child {
            border-bottom-left-radius: 20px;
            border-bottom-right-radius: 20px;
        }

    .rank {
        font-weight: bold;
        font-size: 18px; 
        margin-right: 0;
    }

    .first-place {
        color: gold; /* Color for first place */
    }

    .second-place {
        color: silver; /* Color for second place */
    }

    .third-place {
        color: #cd7f32; /* Color for third place (bronze) */
    }

    .clan-name {
        color: black;
        font-weight: normal;
        margin-left: 10px;
    }

    .clan-points {
        color: black;
        margin-bottom: 0;
    }
</style>

<body>

    <div class="page-container">
        <div class="row">

            <div class="col-lg-3">
                <div class="grid-container">
                    <!-- Streak Boxes (Left Side) -->
                    <section class="grid-item mb-4" style="background-color: #B8D3FF;">
                        <h5 class="card-title">Current Streak</h5>
                        @if (Model != null)
                        {
                            <p class="card-text">@Model.LoginStreak.CurrentStreak</p>
                        }
                        else
                        {
                            <p class="card-text no-info">No login streak information available.</p>
                        }
                    </section>

                    <section class="grid-item mb-4" style="background-color: #B8D3FF;">
                        <h5 class="card-title">Longest Streak</h5>
                        @if (Model != null)
                        {
                            <p class="card-text">@Model.LoginStreak.LongestStreak</p>
                        }
                        else
                        {
                            <p class="card-text no-info">No login streak information available.</p>
                        }
                    </section>
                </div>
            </div>

            <div class="col-lg-6">
                <section style="background-color: #D0EBFF;">
                    <h3>Login Streak Rewards</h3>
                    <ul class="list-group">
                        <!-- Inside your loop for rewards -->
                        @foreach (var reward in Model.Rewards)
                        {
                            var userStreakReward = Model.ClaimableRewards.FirstOrDefault(cr => cr.RewardId == reward.RewardId);
                            var badgeColor = userStreakReward != null && !userStreakReward.Claimed ? "badge-primary" : "badge-secondary";
                            var rewardColor = rewardColors.ContainsKey(reward.RewardId) ? rewardColors[reward.RewardId] : "#edf2f9";
                            var badgeCursor = userStreakReward != null && !userStreakReward.Claimed ? "pointer" : "default";
                            var listItemOpacity = userStreakReward != null && userStreakReward.Claimed ? "opacity: 0.5;" : "";
                            var claimableStyle = userStreakReward != null && !userStreakReward.Claimed || userStreakReward != null && userStreakReward.Claimed
                            ? "background-color: #3498db; color: white; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);"
                            : "";

 
                            <!-- Display member item -->
                            <div class="media streak-reward-item mt-3 d-flex justify-content-between align-items-center claimable-item" style="border: none; @listItemOpacity @claimableStyle">
                                <span class="medal-text">@Html.Raw(reward.MedalText)</span>

                                @if (userStreakReward != null && !userStreakReward.Claimed)
                                {
                                    <a class="badge @badgeColor badge-pill point-badge claimable" style="background-color: @rewardColor; font-size: 16px; padding: 10px; cursor: @badgeCursor; color: white;" onclick="claimReward(@userStreakReward.UserStreakRewardId)">
                                        Claim @reward.Points Points
                                    </a>
                                }
                                else if (userStreakReward != null && userStreakReward.Claimed)
                                {
                                    <span class="badge @badgeColor badge-pill point-badge claimed" style="background-color: @rewardColor; font-size: 16px; padding: 10px; color: white;">@reward.Points Points claimed</span>
                                }
                                else
                                {
                                    <span class="badge @badgeColor badge-pill point-badge not-claimable" style="background-color: @rewardColor; font-size: 16px; padding: 10px; cursor: default; color: white;">@reward.Points Points</span>
                                }
                            </div>
                        }
                    </ul>
                </section>
            </div>

            <div class="col-lg-3">
                <div class="grid-container">
                    <section class="grid-item mb-4" style="background-color: lightblue;">
                        <h5 class="card-title">Total Completed Workouts</h5>
                        <p class="card-text">@Model.UserWorkoutStats.WorkoutCount</p>
                    </section>

                    <section class="grid-item mb-4" style="background-color: lightblue;">
                        <h5 class="card-title">Total Workout Duration (Mins)</h5>
                        <p class="card-text">@Model.UserWorkoutStats.TotalWorkoutDuration</p>
                    </section>

                    <section class="grid-item mb-4" style="background-color: lightblue;">
                        <h5 class="card-title">Most Frequent Workout Type</h5>
                        <p class="card-text-string">@Model.MostFrequentWorkoutType</p>
                    </section>
                </div>
            </div>

            <div class="col-lg-8">
                <section style="max-height: 790px;">
                    <h3>Weight</h3>

                    <!-- Current Weight -->
                    @if (Model.WeightData.Any())
                    {
                        var currentWeight = Model.WeightData.OrderByDescending(we => we.Date).First().Weight;
                        var formattedCurrentWeight = $"{(decimal)currentWeight:F1} kg";
                        <h8>Current Weight: <strong>@formattedCurrentWeight</strong></h8>
                    }

                    <!-- Progress Bar -->
                    <div class="progress" style="height: 30px; position: relative;">
                        @if (Model.WeightData.Any())
                        {
                            var firstWeight = Model.WeightData.OrderBy(we => we.Date).First().Weight;
                            var currentWeight = Model.WeightData.OrderByDescending(we => we.Date).First().Weight;

                            var progress = (firstWeight <= goalWeight && currentWeight >= goalWeight) ? 100 : ((currentWeight - firstWeight) / (goalWeight - firstWeight) * 100);

                            var progressColorClass = (progress < 0) ? "bg-danger" : "bg-success"; // Updated color class

                            var formattedProgress = $"{(decimal)Math.Abs(progress.GetValueOrDefault()):F1}";

                            var textColorClass = (progress < 100) ? "text-black" : "text-white"; // Determine text color class

                            <div class="progress-bar progress-bar-striped progress-bar-animated @progressColorClass" role="progressbar" style="width: @formattedProgress%;" aria-valuenow="@progress" aria-valuemin="0" aria-valuemax="100"></div>
                            <span class="progress-label-right font-weight-bold @textColorClass" style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%); font-size: 14px;">@($"Goal: {goalWeight:F1} kg")</span>
                        }
                        else
                        {
                            <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                                No entries yet
                            </div>
                        }
                    </div>

                    @if (Model.WeightData.Count() < 2)
                    {
                        <div class="alert alert-info mt-3" role="alert">
                            <strong>Start tracking your progress!</strong> Make more entries to track your fitness journey. Good Luck!
                        </div>
                    }
                    else
                    {
                        var firstWeight = Model.WeightData.OrderBy(we => we.Date).First().Weight;
                        var currentWeight = Model.WeightData.OrderByDescending(we => we.Date).First().Weight;

                        double? progress = 0;

                        if (firstWeight < goalWeight)
                        {
                            progress = (currentWeight - firstWeight) / (goalWeight - firstWeight) * 100;
                        }
                        else if (firstWeight >= goalWeight)
                        {
                            progress = (firstWeight - currentWeight) / (firstWeight - goalWeight) * 100;
                        }

                        <div class="mt-3">
                            @if (progress >= 100)
                            {
                                <div class="alert alert-success" role="alert">
                                    <strong>Congratulations!</strong> You've reached your goal!
                                </div>
                            }
                            else if (progress >= 0)
                            {
                                <div class="alert alert-info" role="alert">
                                    <strong>Keep going!</strong> You're making excellent progress!
                                </div>
                            }
                            else
                            {
                                <div class="alert alert-warning" role="alert">
                                    <strong>Challenge yourself, you can do this!</strong> You're below your goal.
                                </div>
                            }
                        </div>
                    }


                    <div class="dashboard-card">
                        <div class="d-flex justify-content-between align-items-center">
                            <h3></h3>
                            <button id="openWeightModalBtn" class="btn btn-primary rounded-circle">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>

                        <!-- Chart.js Canvas for Weight Tracking Chart -->
                        <div class="chart-container">
                            <canvas id="weightChart" width="400" height="200"></canvas>
                        </div>

                        <!-- Weight Entry Modal -->
                        <div class="modal fade" id="weightEntryModal" tabindex="-1" role="dialog" aria-labelledby="weightEntryModalLabel" aria-hidden="true">
                            <div class="modal-dialog" role="document">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="weightEntryModalLabel">Add Weight Entry</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        <!-- Form for adding new weight entry -->
                                        <form id="weightEntryForm" method="post" action="@Url.Action("AddWeightEntry", "Dashboard")" class="needs-validation" novalidate>
                                            @Html.AntiForgeryToken()
                                            <div class="form-group">
                                                <label for="newWeight" class="form-label">Weight:</label>
                                                <div class="input-group">
                                                    <input type="number" step="0.1" class="form-control" id="newWeight" name="newWeight" required />
                                                    <div class="input-group-append">
                                                        <span class="input-group-text">kg</span>
                                                    </div>
                                                    <div class="invalid-feedback">
                                                        Please enter a valid weight.
                                                    </div>
                                                </div>
                                            </div>

                                            <button type="submit" class="btn btn-primary">Add Entry</button>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </div>


                </section>
            </div>

            <div class="col-lg-4">
                <section style="max-height: 790px; min-height:790px;background-color: #D5DDFF;">
                    <h2 style="color:black;">User Leaderboards</h2>
                    <div style="max-height: 705px; overflow-y: auto; background-color: #D5DDFF;">
                        <ul id="userLeaderboard" class="list-group"></ul>
                    </div>
                </section>
            </div>
        </div>

      
    </div>
   
</body>

<script>
    // JavaScript to open the weight entry modal
    document.getElementById('openWeightModalBtn').addEventListener('click', function () {
        $('#weightEntryModal').modal('show');
    });

    function navigateToManage() {
        window.location.href = "/Identity/Account/Manage/Index";
    }
</script>

<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>

<script>

    // Function to load clan leaderboards
    function loadUserLeaderboards() {
        $.ajax({
            url: '/Dashboard/Leaderboards', // Replace this with your actual endpoint URL
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                console.log('Received user leaderboards data:', data);
                var leaderboardList = $('#userLeaderboard');
                leaderboardList.empty(); // Clear existing content

                // Check if data is not empty
                if (data && data.length > 0) {
                    // Iterate through the leaderboard data
                    $.each(data, function (index, user) {
                        // Create list item for each clan
                        var listItem = $('<li class="list-group-item leaderboard-item d-flex justify-content-between align-items-center">');

                        // Display rank and clan name together without space
                        var rankAndName = $('<span class="rank">' + '#' + (index + 1) + ' <span class="clan-name text-dark font-weight-bold">' + user.customUserName + '</span></span>');
                        if (index === 0) {
                            rankAndName.addClass('first-place');
                        } else if (index === 1) {
                            rankAndName.addClass('second-place');
                        } else if (index === 2) {
                            rankAndName.addClass('third-place');
                        }

                        // Append rank and clan name to the list item
                        listItem.append(rankAndName);

                        // Create a user points element
                        var userPoints = $('<span class="user-details" style="font-size: 1.1em; letter-spacing: 1px;"> <i class="fas fa-coins gold-coin-icon mr-2"></i> <strong>' + user.points + '</strong> <strong style="font-size: 0.7em;">points</strong></span>');


                        // Append the clan points to the list item
                        listItem.append(userPoints);

                        leaderboardList.append(listItem);
                    });
                } else {
                    // Display a message if there are no leaderboards available
                    leaderboardList.append('<li class="list-group-item">No leaderboards available</li>');
                }


            },
            error: function (error) {
                console.error('Error fetching clan leaderboards:', error);
            }
        });
    }



    // Call the function to load clan leaderboards when the page loads
    $(document).ready(function () {
        loadUserLeaderboards();
    });


    // Function to handle claiming rewards
    function claimReward(userStreakRewardId) {
        $.ajax({
            type: 'POST',
            url: '/Dashboard/ClaimReward',
            data: { userStreakRewardId: userStreakRewardId },
            success: function (response) {
                if (response.success) {
                    // Display SweetAlert on success
                    Swal.fire({
                        title: 'Success!',
                        text: response.pointsClaimed + ' Points claimed',
                        icon: 'success',
                    }).then((result) => {
                        // Reload the page after the modal is closed
                        if (result.isConfirmed || result.isDismissed) {
                            location.reload();
                        }
                    });
                } else {
                    // Display SweetAlert on failure
                    Swal.fire('Error!', 'Unable to claim reward.', 'error');
                }
            },
            error: function () {
                // Display SweetAlert on error
                Swal.fire('Error!', 'An unexpected error occurred.', 'error');
            }
        });
    }
</script>


<script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0"></script>

@functions {
    public string GetProfilePictureUrl()
    {
        // Check if the user is authenticated
        if (User.Identity?.IsAuthenticated == true)
        {
            // Retrieve the user from UserManager synchronously
            var user = UserManager.GetUserAsync(User).GetAwaiter().GetResult();

            // Check if the user has a profile picture
            if (user != null && !string.IsNullOrEmpty(user.ProfileImageUrl))
            {
                return user.ProfileImageUrl;
            }
        }

        // Use a default or empty profile picture URL
        return "/Images/empty-pfp.png";
    }
}

</html>

@* weight graph *@
<script>
    // Get the chart context
    var ctx = document.getElementById('weightChart').getContext('2d');

    // Get dates and weights from the server
    var dates = @Html.Raw(Json.Serialize(Model.WeightData.Select(w => w.Date.ToString("dd-MM-yyyy"))));
    var weights = @Html.Raw(Json.Serialize(Model.WeightData.Select(w => w.Weight)));

    // Create a line chart with a slight curve
    var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: dates,
            datasets: [{
                label: 'Weight',
                data: weights,
                borderColor: 'rgba(54, 162, 235, 1)',
                backgroundColor: gradientFill(ctx, 'rgba(54, 162, 235, 0.6)', 'rgba(255, 255, 255, 0)'),
                pointBackgroundColor: 'rgba(54, 162, 235, 1)',
                pointRadius: 3,
                pointHoverRadius: 8,
                borderWidth: 2,
                fill: true,
                lineTension: 0.3 // Adjust the line tension for the curve
            }]
        },
        options: {
            scales: {
                xAxes: [{
                    type: 'time',
                    time: {
                        unit: 'day',
                        tooltipFormat: 'DD-MM-YYYY'
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Date'
                    },
                }],
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    },
                    scaleLabel: {
                        display: true,
                        labelString: 'Weight (kg)'
                    }
                }]
            }
        }
    });

    // Function to create gradient fill
    function gradientFill(ctx, startColor, endColor) {
        var gradient = ctx.createLinearGradient(0, 0, 0, 400);
        gradient.addColorStop(0, startColor);
        gradient.addColorStop(1, endColor);
        return gradient;
    }


</script>

