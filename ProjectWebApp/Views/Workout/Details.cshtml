@model ProjectWebApp.Models.Workout
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using ProjectWebApp.Data
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext _context

@{
    ViewData["Title"] = "Workout Details";
    var currentUser = await UserManager.GetUserAsync(User);
    var hasFavorited = currentUser != null && await _context.UserFavouriteWorkouts
        .AnyAsync(w => w.UserId == currentUser.Id && w.WorkoutId == Model.WorkoutId);
    var scheduledWorkouts = await _context.UserCalendars
           .Where(w => w.UserId == currentUser.Id && w.WorkoutId == Model.WorkoutId)
           .ToListAsync();
    // Check if the current workout is scheduled for the current user
    var hasScheduledWorkout = await _context.UserCalendars
        .AnyAsync(w => w.UserId == currentUser.Id && w.WorkoutId == Model.WorkoutId);

    // Get the scheduled date and time (if applicable)
    var scheduledWorkoutEntry = await _context.UserCalendars
        .FirstOrDefaultAsync(w => w.UserId == currentUser.Id && w.WorkoutId == Model.WorkoutId);

    var scheduledWorkoutDateTime = scheduledWorkoutEntry?.ScheduledDateTime.ToString("dd-MM-yyyy HH:mm");
    DateTime currentDate = DateTime.MinValue;


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/site.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" integrity="sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8sh+Wy6A/AO9GPQhB8I92PpD0Fq1ahR2GFDIS3" crossorigin="anonymous">

</head>

<body>

    <div class="page-container">
        
        <section class="container mt-4">
            <a href="@Url.Action("Index", "Workout")" class="btn btn-primary mb-3">Back to Workouts</a>

            <div class="card">
                <div class="embed-responsive embed-responsive-16by9">
                    <video class="embed-responsive-item" src="/Videos/@Model.VideoUrl" autoplay loop muted playsinline controls></video>
                </div>

                <hr class="my-4">

                <div class="card-body text-center">
                    <h3 class="card-title">@Model.Name</h3>
                    <p class="card-text">@Model.Description</p>
                    <p class="card-text"><strong>Category:</strong> @Model.Category</p>

                    <div id="progressBarSection" style="display: none;">
                        <div class="progress">
                            <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>

                    <div id="workoutButtons" class="mt-3">
                        <button id="startButton" class="btn btn-success" onclick="startWorkout(@Model.WorkoutId, @Model.DurationMinutes)">
                            Start Workout
                        </button>

                        <button id="favouriteButton" type="button" class="btn btn-link btn-favorite ml-3" onclick="addToFavourites(@Model.WorkoutId)">
                            <i class="far fa-heart fa-2x"></i>
                        </button>
                    </div>

                    <div id="timerSection" style="display: none;" class="mt-3">
                        <p id="timer"></p>
                    </div>
                </div>
            </div>
        </section>


        <section>
            <div class="row">
                <div class="col-md-9">
                    <h3 style="padding-bottom: 10px;">Schedule Information (@Model.Name)</h3>
                </div>
                <div class="col-md-3 text-md-right">
                    <button id="addToScheduleButton" class="btn btn-primary btn-sm" onclick="openScheduleModal()">
                        Add to Schedule
                    </button>
                </div>
            </div>


            <hr style="background-color: #666; height: 1px;">

            @if (scheduledWorkouts.Any())
            {
                <div id="scheduledInfoSection">
                    @foreach (var scheduledWorkout in scheduledWorkouts.OrderBy(sw => sw.ScheduledDateTime))
                    {
                        <div class="card mb-2">
                            <div class="card-header bg-primary text-white">
                                <h5 class="mb-0">@scheduledWorkout.ScheduledDateTime.ToString("dddd, dd MMMM yyyy")</h5>
                            </div>
                            <div class="card-body">
                                <div class="row">
                                    <div class="col">
                                        <p class="lead mb-0">Scheduled Time: <strong>@scheduledWorkout.ScheduledDateTime.ToString("HH:mm")</strong></p>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer d-flex justify-content-between align-items-center">
                                <div class="notes">
                                    @if (!string.IsNullOrEmpty(scheduledWorkout.Notes))
                                    {
                                        <p class="mb-0">Notes: <strong>@scheduledWorkout.Notes</strong></p>
                                    }
                                    else
                                    {
                                        <p class="mb-0">No notes for this scheduled workout</p>
                                    }
                                </div>
                                <button class="btn btn-danger" data-workout-id="@scheduledWorkout.WorkoutId" data-scheduled-datetime="@scheduledWorkout.ScheduledDateTime.ToString("yyyy-MM-ddTHH:mm:ss")" onclick="removeScheduledWorkout(this)">Remove From Schedule</button>
                            </div>
                        </div>

                    }
                </div>





            }
            else
            {
                <div class="text-center">
                    <p class="text-dark text-muted">You have not scheduled this workout yet.</p>
                </div>
            }
        </section>

       
    </div>


    <div class="modal fade" id="scheduleModal" tabindex="-1" role="dialog" aria-labelledby="scheduleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="scheduleModalLabel">Schedule Workout</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="scheduleForm">
                        <div class="form-group">
                            <label for="scheduleDate">Date:</label>
                            <input type="date" class="form-control" id="scheduleDate" required>
                        </div>
                        <div class="form-group">
                            <label for="scheduleTime">Time:</label>
                            <input type="time" class="form-control" id="scheduleTime" required>
                        </div>
                        <div class="form-group">
                            <label for="scheduleNote">Note:</label>
                            <textarea class="form-control" id="scheduleNote" rows="3"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Save</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

  
    @section scripts {
        <script>
            function startWorkout(workoutId, durationMinutes, points) {
                // Hide the button
                document.getElementById('startButton').style.display = 'none';

                // Show the progress bar
                document.getElementById('progressBarSection').style.display = 'block';
                document.getElementById('timerSection').style.display = 'block';

                // * 60 for minutes
                var durationSeconds = durationMinutes;

                // Set the total duration for the progress bar and timer
                var totalDuration = durationSeconds;

                // Set up the progress bar
                var progressBar = document.getElementById('progressBar');
                progressBar.style.width = '0%';

                // Set up the timer display
                var timerDisplay = document.getElementById('timer');
                timerDisplay.textContent = formatTime(totalDuration);

                // Update the progress bar and timer every second
                var updateInterval = 1000; // Update the progress every second
                var updateProgressBar = setInterval(function () {
                    // Update the progress bar
                    progressBar.style.width = ((durationSeconds - totalDuration) / durationSeconds) * 100 + '%';

                    // Update the timer display
                    timerDisplay.textContent = formatTime(totalDuration);

                    // Check if the total duration has reached zero
                    if (totalDuration < 0) {
                        // Automatically complete the workout when the timer reaches zero
                        completeWorkout(workoutId);

                        // Clear the interval
                        clearInterval(updateProgressBar);
                    }

                    // Decrement the total duration
                    totalDuration--;
                }, updateInterval);
            }

            function completeWorkout(workoutId, points) {
                // Hide the progress bar and timer
                document.getElementById('progressBarSection').style.display = 'none';
                document.getElementById('timerSection').style.display = 'none';

                // Fetch the points from the server and update the user's points
                fetch(`/Workout/GetPoints?workoutId=${workoutId}`)
                    .then(response => response.json())
                    .then(updatedPoints => {
                        // Update the user's points
                        updatePoints(updatedPoints);

                        // Display completion message using SweetAlert
                        Swal.fire({
                            title: 'Congratulations!',
                            text: `You have completed the workout and earned ${updatedPoints} points.`,
                            icon: 'success',
                            confirmButtonText: 'OK',
                        }).then((result) => {
                            // Reload the page after the modal is closed
                            if (result.isConfirmed || result.isDismissed) {
                                location.reload();
                            }
                        });

                        // Trigger the server-side action to mark the workout as completed
                        fetch(`/Workout/MarkWorkoutAsCompleted?workoutId=${workoutId}`, {
                            method: 'POST'
                        })
                            .then(response => response.ok ? response.json() : Promise.reject("Failed to mark workout as completed"))
                            .then(responseData => {
                                // Handle the response if needed
                                console.log(responseData);
                            })
                            .catch(error => {
                                console.error("Error occurred while marking workout as completed: " + error);
                            });
                    })
                    .catch(error => {
                        console.error("Error occurred while fetching points: " + error);
                    });
            }



            function updatePoints(points) {
                console.log("Adding points to db...");
                $.ajax({
                    url: '@Url.Action("UpdatePoints", "Workout")',  // Adjust controller name as needed
                    type: 'POST',
                    data: { points: points },  // Use the correct variable name
                    success: function (response) {
                        // Handle success
                    },
                    error: function (xhr, status, error) {
                        console.error("Error occurred while updating user's points: " + error);
                    }
                });
            }

            function formatTime(seconds) {
                var minutes = Math.floor(seconds / 60);
                var remainingSeconds = seconds % 60;
                return minutes + 'm ' + remainingSeconds + 's ';
            }

            //----------------------------------------------------------------------------------------------------------------------
            $(document).ready(function () {
                updateFavouriteStatus();

                $("#favouriteButton").on("click", function () {
                    addToFavourites();
                });
            });

            function updateFavouriteStatus() {
                $.ajax({
                    url: "@Url.Action("IsFavourited", "Workout", new { id = Model.WorkoutId })",
                    type: "GET",
                    async: false, // Set to synchronous
                    success: function (isFavorited) {
                        if (isFavorited) {
                            $("#favouriteButton").html('<i class="fas fa-heart fa-2x text-danger"></i>');
                        } else {
                            $("#favouriteButton").html('<i class="far fa-heart fa-2x"></i>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error occurred while checking favorite status: " + error);
                    }
                });
            }

            function addToFavourites(workoutId) {
                $.post("/Workout/AddToFavourites", { workoutId: @Model.WorkoutId })
                    .done(function () {
                        // Handle success, you can update UI or provide feedback
                        console.log("Workout added to favourites!");
                        updateFavouriteStatus();
                    })
                    .fail(function (xhr, status, error) {
                        console.error("Error occurred while adding workout to favourites: " + error);
                    });
            }
        </script>

        <script>
            function openScheduleModal() {
                $('#scheduleModal').modal('show');
                $('#scheduleForm')[0].reset();
            }

            $(document).ready(function () {
                $('#scheduleForm').submit(function (e) {
                    e.preventDefault();

                    var scheduleDate = $('#scheduleDate').val();
                    var scheduleTime = $('#scheduleTime').val();
                    var scheduleNote = $('#scheduleNote').val();

                    $.ajax({
                        url: '@Url.Action("ScheduleWorkout", "Workout")',
                        type: 'POST',
                        data: {
                            workoutId: @Model.WorkoutId,
                            scheduleDate: scheduleDate,
                            scheduleTime: scheduleTime,
                            scheduleNote: scheduleNote
                        },
                        success: function (response) {
                            if (response.success) {
                                console.log('Schedule information saved successfully:', response);

                                // Display success message using SweetAlert
                                Swal.fire({
                                    title: 'Success',
                                    text: 'Schedule information saved successfully!',
                                    icon: 'success',
                                }).then((result) => {
                                    // Reload the page after the modal is closed
                                    if (result.isConfirmed || result.isDismissed) {
                                        $('#scheduleModal').modal('hide');
                                        location.reload();
                                    }
                                });
                            } else {
                                console.error('Error occurred while saving schedule information:', response.message);

                                // Display error message using SweetAlert
                                Swal.fire({
                                    title: 'Error',
                                    text: response.message,
                                    icon: 'error',
                                });
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error occurred while saving schedule information:', error);

                            // Display error message using SweetAlert
                            Swal.fire({
                                title: 'Error',
                                text: 'Error occurred while saving schedule information. Please try again.',
                                icon: 'error',
                            });
                        }
                    });
                });
            });

        </script>

        <script>
            function removeScheduledWorkout(button) {
                // Set data attributes for workout information
                var workoutId = $(button).data('workout-id');
                var scheduledDateTime = $(button).data('scheduled-datetime');

                // Format the date and time using Moment.js
                var formattedDateTime = moment(scheduledDateTime).format('DD-MM-YYYY HH:mm');

                // Display a confirmation message using SweetAlert
                Swal.fire({
                    title: 'Confirmation',
                    html: 'Are you sure you want to remove the scheduled workout for ' + formattedDateTime + '?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, remove it!',
                }).then((result) => {
                    if (result.isConfirmed) {
                        // If the user confirms, call the confirmedRemove function
                        confirmedRemove(workoutId, scheduledDateTime);
                    }
                });
            }

            function confirmedRemove(workoutId, scheduledDateTime) {
                // Send the workout ID and scheduled date and time to the server for removal
                $.ajax({
                    url: '@Url.Action("RemoveScheduledWorkout", "Workout")',
                    type: 'POST',
                    data: { workoutId: workoutId, scheduledDateTime: scheduledDateTime },
                    success: function (response) {
                        if (response.success) {
                            console.log('Scheduled workout removed successfully:', response);
                            // Display success message using SweetAlert
                            Swal.fire({
                                title: 'Success',
                                text: 'Scheduled workout removed successfully!',
                                icon: 'success',
                            }).then((result) => {
                                // Reload the page after the modal is closed
                                if (result.isConfirmed || result.isDismissed) {
                                    location.reload();
                                }
                            });
                        } else {
                            console.error('Error occurred while removing scheduled workout:', response.message);
                            // Display error message using SweetAlert
                            Swal.fire({
                                title: 'Error',
                                text: response.message,
                                icon: 'error',
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error occurred while removing scheduled workout:', error);
                        // Display error message using SweetAlert
                        Swal.fire({
                            title: 'Error',
                            text: 'Error occurred while removing scheduled workout. Please try again.',
                            icon: 'error',
                        });
                    }
                });
            }


        </script>
    }

      <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>

</body>
</html>

