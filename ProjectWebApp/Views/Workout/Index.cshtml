@model List<ProjectWebApp.Models.Workout>

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Linq
@using ProjectWebApp.Data
@inject UserManager<ApplicationUser> UserManager
@inject ApplicationDbContext _context

@{
    ViewData["Title"] = "Workouts";
    var currentUser = await UserManager.GetUserAsync(User);
    var favoritedWorkoutIds = _context.UserFavouriteWorkouts
    .Where(w => w.UserId == currentUser.Id)
    .Select(w => w.WorkoutId)
    .ToList();
    var userCalendars = ViewData["UserCalendars"] as List<UserCalendar>;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - ProjectWebApp</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/site.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.2/main.min.css"
        integrity="sha384-39yVKLsD9lMelmY+ij49KZgE+Mfk6hjdUPNE8yKHqdMPceLXzhlCJAK81xlD5jDj" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.2/main.min.js"
        integrity="sha384-ADWbxM16+9IIGUQa99OrbbxWmd97OnAWtGmPKU3jIEJbABR44F0exAvDSCmFPXfZ"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"
        integrity="sha384-Uz1UHyakAAz121kPY0Nx6ZGzYeUTy9zAtcpdwVmFCEwiTGPA2K6zSGgkKJEQfMhK"
        crossorigin="anonymous"></script>

    <style>
        @*.fc.fc-toolbar-title,*@.fc .fc-day-header,
        .fc .fc-day,
        .fc .fc-day-number,
        .fc .fc-timegrid .fc-slats,
        .fc .fc-timegrid-slot-label-cushion,
        .fc .fc-timegrid-axis-cushion {
            color: white !important;
        }

        .fc .fc-event {
            background-color: #007bff;
            color: white !important;
            cursor: pointer;
        }

        .event-tooltip {
            position: absolute;
            z-index: 1000;
            background-color: #007bff;
            border: 1px solid #ccc;
            padding: 10px;
            max-width: 200px;
            color: white;
        }

        .fc .fc-toolbar-title {
            font-size: 18px;
            font-weight: bold;
            text-transform: uppercase;
        }

        .fc .fc-prev-button,
        .fc .fc-next-button,
        .fc .fc-dayGridMonth-button,
        .fc .fc-timeGridWeek-button,
        .fc .fc-timeGridDay-button,
        .fc .fc-customTitle-button {
            background-color: white;
            color: #333;
            border: 1px solid #ddd;
            font-size: 12px;
            padding: 4px 12px;
            text-transform: uppercase;
        }

        .fc .fc-button:hover,
        .fc .fc-customTitle-button:hover {
            background-color: #007bff;
        }

        .fc .fc-daygrid-day.fc-day-today {
            background-color: #b8dbff;
        }

        .fc .fc-day-header,
        .fc .fc-day,
        .fc .fc-day-number,
        .fc .fc-timegrid .fc-slats,
        .fc .fc-timegrid-slot-label-cushion,
        .fc .fc-timegrid-axis-cushion {
            color: black !important;
        }
    </style>
</head>

<body>
    <div class="page-container">

       <section>
            <div class="row">
                <!-- Search Bar Section -->
                <div class="col-md-12">
                    <div id="searchBar" class="position-relative mb-0">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text bg-transparent border-0 rounded-0">
                                   <i class="fas fa-search text-muted"></i> 
                               </span>
                            </div>
                            <input type="text" id="searchInput" class="form-control flex-grow-1 custom-search"
                                placeholder="Search workouts by name..." oninput="updateSearchResults()" autocomplete="off">
                            <div class="clear-icon" id="clearButton" onclick="clearSearch()">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"
                                    fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                    stroke-linejoin="round">
                                    <line x1="18" y1="6" x2="6" y2="18"></line>
                                    <line x1="6" y1="6" x2="18" y2="18"></line>
                                </svg>
                            </div>
                        </div>
                    </div>
                </div>
            </div>          

           <!-- Search Results Section -->
            <div id="searchResults" style="display: none; margin-top: 10px; border-top: 1px solid #ddd; padding-top: 10px;">
                <h4 class="mb-3">Search Results</h4>
                <div class="scrollable-row" id="searchResultsWorkouts">
                </div>
                <div id="noResultsMessage" class="text-muted" style="display: none;">No search results found.</div>
            </div>

        </section>


        <div class="row row-equal-height">
            <div class="col-md-12 col-lg-6">
                @if (ViewData["Workouts"] != null)
                {
                    var workouts = ViewData["Workouts"] as List<Workout>;

                    <section class="favourite-section" style="background-color:white;">
                        <h3>Favourite Workouts</h3>
                        <!-- user's favorited workouts -->
                        @if (favoritedWorkoutIds.Any())
                        {
                            <div class="row" id="favouriteWorkouts" style="max-height: 650px; overflow-y: auto;">
                                @foreach (var workoutId in favoritedWorkoutIds)
                                {
                                    var workout = workouts.FirstOrDefault(w => w.WorkoutId == workoutId);

                                    if (workout != null)
                                    {
                                        <div class="col-lg-4 col-md-6 col-sm-12">
                                            <div class="workout-card" data-category="@workout.Category">
                                                <a href="@Url.Action("Details", "Workout", new { id = workout.WorkoutId })" class="card workout-link">
                                                    <div class="card-body" style="background-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1)), url('@workout.ImageUrl'); background-size: cover; background-position: center;">
                                                        <h5 class="card-title text-white">@workout.Name</h5>
                                                        <div class="info" style="text-align:center; background-color:white; opacity:0.8">
                                                            <p class="category">Category: @workout.Category</p>
                                                            <p class="duration">Duration: @workout.DurationMinutes minutes</p>
                                                            <p class="difficulty">Difficulty: @workout.difficulty</p>
                                                            <p class="targetMuscle">Muscle Target: @workout.TargetMuscle</p>
                                                             <span class="points" style="font-family: 'Roboto', sans-serif; font-size: 1.1em; letter-spacing: 1px;">
                                                                <i class="fas fa-coins gold-coin-icon mr-2"></i>
                                                                <strong>@workout.rewardPoints</strong> <strong style="font-size: 0.7em;">points</strong>
                                                            </span>
                                                        </div>
                                                    </div>
                                                </a>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        }
                        else
                        {
                            <div>
                                <p class="text-muted">No favourited workouts yet.</p>
                                <p class="text-muted">Discover new workouts and favourite them to see them here.</p>
                            </div>
                        }
                    </section>
  
                }
            </div>
             <div class="col-md-12 col-lg-6">
                <section class="calendar-section d-flex flex-column h-100">
                    <div id="calendarSection" style="text-align: center;">
                        <div class="section-header favourite-section mb-2">
                            <h3>My Calendar</h3>
                        </div>
                        <div id="calendar" style="height:100%; margin: 0 auto;"></div>

                    </div>
                </section>
            </div>
        </div>

        @if (ViewData["Workouts"] != null)
        {
            var workouts = ViewData["Workouts"] as List<Workout>;
            <!-- featured workouts -->
            @if (workouts.Any(w => w.IsFeatured))
            {
                <section class="d-flex flex-column h-100">
                    <div class="section-header featured-section">
                        <h3>Featured Workouts</h3>
                    </div>
                    <div class="scrollable-row" id="featuredWorkouts">
                        @foreach (var workout in workouts.Where(w => w.IsFeatured))
                        {
                            <div class="col-lg-4 col-md-6 col-sm-12 workout-card" data-category="@workout.Category">
                                <a href="@Url.Action("Details", "Workout", new { id = workout.WorkoutId })"
                                    class="card workout-link">
                                    @* <img src="/Images/@workout.imageUrl"  *@
                                   <img src="@workout.ImageUrl" class="card-img-top" alt="Workout Image" style="height: 200px;">
                                    <div class="card-body">
                                        <h5 class="card-title">@workout.Name</h5>
                                        <div class="info" style="text-align:center;">
                                            <p class="category">Category: @workout.Category</p>
                                            <p class="duration">Duration: @workout.DurationMinutes minutes</p>
                                            <p class="difficulty">Difficulty: @workout.difficulty</p>
                                            <p class="targetMuscle">Muscle Target: @workout.TargetMuscle</p>
                                            <span class="points" style="font-family: 'Roboto', sans-serif; font-size: 1.1em; letter-spacing: 1px;">
                                                <i class="fas fa-coins gold-coin-icon mr-2"></i>
                                                <strong>@workout.rewardPoints</strong> <strong style="font-size: 0.7em;">points</strong>
                                            </span>

                                        </div>
                                    </div>
                                </a>
                            </div>
                        }
                    </div>
                </section>
            }
        }

@*          @if (ViewData["Workouts"] != null)
        {
            var workouts = ViewData["Workouts"] as List<Workout>;
            <!-- Display featured workouts -->
            @if (workouts.Any(w => w.IsFeatured))
            {
                <section class="d-flex flex-column h-100">
                    <div class="section-header featured-section">
                        <h3>Featured Workouts</h3>
                    </div>
                    <div class="scrollable-row" id="featuredWorkouts">
                        @foreach (var workout in workouts.Where(w => w.IsFeatured))
                        {
                            <div class="col-lg-4 col-md-6 col-sm-12 workout-card-new" data-category="@workout.Category">
                                    <div class="first-content">
                                        <span>first</span>
                                    </div>
                                    @* <img src="/Images/@workout.imageUrl"  *@
                                   
                                   @* <div class="second-content">
                                       <span>second</span>
                                    </div>
                            </div>
                        }
                    </div>
                </section>
            }


        } *@



        <section>
            <!-- All Exercises -->
            <div class="section-header all-workouts-section" style="position: relative;">
                <h3 style="float: left; margin-right: 10px;">All Workouts</h3>
                <img id="filterIcon" class="filter-icon" src="/Images/filter.png" alt="Filter Icon"
                    onclick="toggleFilterForm()">
                <div id="filterForm" class="filter-form">
                    <div class="filter-option">
                        <label for="categoryFilter">Category:</label>
                        <select id="categoryFilter">
                            <option value="All">All</option>
                            <option value="Cardio">Cardio</option>
                            <option value="High-Intensity Interval Training">High-Intensity Interval Training</option>
                            <option value="Strength Training">Strength Training</option>
                            <option value="Running">Running</option>
                            <option value="Yoga">Yoga</option>
                            <option value="Pilates">Pilates</option>
                            <option value="Balanced Workouts">Balanced Workouts</option>
                        </select>
                    </div>

                    <div class="filter-option">
                        <label for="difficultyFilter">Difficulty:</label>
                        <select id="difficultyFilter">
                            <option value="All">All</option>
                            <option value="Easy">Easy</option>
                            <option value="Moderate">Moderate</option>
                            <option value="Challenging">Challenging</option>
                        </select>
                    </div>

                    <div class="filter-option">
                        <label for="muscleFilter">Target Muscle:</label>
                        <select id="muscleFilter">
                            <option value="All">All</option>
                            <option value="Legs">Legs</option>
                            <option value="Full Body">Full Body</option>
                            <option value="Back">Back</option>
                            <option value="Arms">Arms</option>
                            <option value="Core">Core</option>
                            <option value="Chest">Chest</option>
                            <option value="Shoulders">Shoulders</option>
                            <option value="Hips">Hips</option>
                        </select>
                    </div>

                    <div class="filter-option">
                        <label for="pointsFilter">Reward Points:</label>
                        <select id="pointsFilter">
                            <option value="0">All</option>
                            <option value="20">20</option>
                            <option value="25">25</option>
                            <option value="30">30</option>
                            <option value="35">35</option>
                            <option value="50">50</option>
                        </select>
                    </div>

                    <button class="w-100 btn btn-lg btn-primary" onclick="applyFilter()">Apply Filter</button>
                </div>
            </div>

            <div id="filterContainer" style="display: flex; flex-direction: column; position: relative;">

                <div id="filterInfo" style="display: none; margin: 10px;">
                    <p id="filterResultText"></p>
                </div>

                <!-- Filtered Workouts -->
                <div class="scrollable-row" id="allWorkouts">
                    @foreach (var workout in ViewData["Workouts"] as List<Workout>)
                    {
                        <div class="col-lg-4 col-md-6 col-sm-12 workout-card" data-category="@workout.Category"
                            data-difficulty="@workout.difficulty" data-muscle="@workout.TargetMuscle"
                            data-points="@workout.rewardPoints">
                            <a href="@Url.Action("Details", "Workout", new { id = workout.WorkoutId })"
                                class="card workout-link">
                               <img src="@workout.ImageUrl" class="card-img-top" alt="Workout Image" style="height: 200px;">
                                 <div class="card-body">
                                    <h5 class="card-title">@workout.Name</h5>

                                    <div class="info" style="text-align:center;">
                                        <p class="category">Category: @workout.Category</p>
                                        <p class="duration">Duration: @workout.DurationMinutes minutes</p>
                                        <p class="difficulty">Difficulty: @workout.difficulty</p>
                                        <p class="targetMuscle">Muscle Target: @workout.TargetMuscle</p>
                                            <span class="points" style="font-family: 'Roboto', sans-serif; font-size: 1.1em; letter-spacing: 1px;">
                                                <i class="fas fa-coins gold-coin-icon mr-2"></i>
                                                <strong>@workout.rewardPoints</strong> <strong style="font-size: 0.7em;">points</strong>
                                            </span>
                                    </div>
                                </div>
                            </a>
                        </div>
                    }
                </div>

            </div>
        </section>
    </div>

    <script>

        var filterForm = document.getElementById('filterForm');
        var filterInfo = document.getElementById('filterInfo');

        function toggleFilterForm() {
            filterForm.style.display = (filterForm.style.display === 'none' || filterForm.style.display === '') ? 'block' : 'none';
        }

        function applyFilter() {
            console.log("Applying filter...");

            var categoryFilter = document.getElementById('categoryFilter').value;
            var difficultyFilter = document.getElementById('difficultyFilter').value;
            var muscleFilter = document.getElementById('muscleFilter').value.toLowerCase();
            var pointsFilter = document.getElementById('pointsFilter').value;

            console.log("Category:", categoryFilter);
            console.log("Difficulty:", difficultyFilter);
            console.log("Muscle:", muscleFilter);
            console.log("Points:", pointsFilter);

            // Set minPoints to null if pointsFilter is not specified
            var minPoints = pointsFilter !== '0' ? parseInt(pointsFilter, 10) : null;

            filterWorkouts(categoryFilter, difficultyFilter, muscleFilter, minPoints);
            filterForm.style.display = 'none';
        }

        function filterWorkouts(category, difficulty, muscle, minPoints) {
            var allWorkoutsSection = document.getElementById('allWorkouts');
            var workoutCards = allWorkoutsSection.getElementsByClassName('workout-card');
            var filterResultText = document.getElementById('filterResultText');

            console.log(`Applying filter...`);
            console.log(`Category: ${category}`);
            console.log(`Difficulty: ${difficulty}`);
            console.log(`Muscle: ${muscle}`);
            console.log(`Points: ${minPoints}`);

            var resultsCount = 0;

            for (var i = 0; i < workoutCards.length; i++) {
                var workoutCard = workoutCards[i];
                var workoutCategory = workoutCard.getAttribute('data-category');
                var workoutDifficulty = workoutCard.getAttribute('data-difficulty');
                var workoutMuscle = workoutCard.getAttribute('data-muscle');
                var workoutPoints = workoutCard.getAttribute('data-points');

                // Check if the workout card is part of the All Workouts section
                if (workoutCard.closest('#allWorkouts')) {
                    console.log(`Card ${i + 1}: Category: ${workoutCategory}, Difficulty: ${workoutDifficulty}, Muscle: ${workoutMuscle}, Points: ${workoutPoints}`);

                    var displayCard = true;

                    if (category !== 'All' && workoutCategory !== category) {
                        displayCard = false;
                    }

                    if (difficulty !== 'All' && workoutDifficulty !== difficulty) {
                        displayCard = false;
                    }

                    if (muscle !== 'all' && (workoutMuscle === null || workoutMuscle.toLowerCase().indexOf(muscle.toLowerCase()) === -1)) {
                        displayCard = false;
                    }

                    if (minPoints !== null && (workoutPoints === null || parseInt(workoutPoints, 10) < minPoints)) {
                        displayCard = false;
                    }

                    console.log(`Display Card: ${displayCard}`);

                    workoutCard.style.display = displayCard ? 'block' : 'none';

                    if (displayCard) {
                        resultsCount++;
                    }
                }
            }

            adjustLayout();

            // Display filter information
            if (category !== 'All' || difficulty !== 'All' || muscle !== 'all' || minPoints !== null) {
                filterInfo.style.display = 'block';
                filterResultText.textContent = resultsCount > 0 ? `Showing ${resultsCount} result(s) for applied filter.` : 'No results found for applied filter.';
            } else {
                filterInfo.style.display = 'none';
            }
        }

        function adjustLayout() {
            var scrollableRow = document.getElementById('allWorkouts');
            scrollableRow.style.justifyContent = 'flex-start';
        }

        function shuffleWorkoutCards() {
            var allWorkoutsSection = document.getElementById('allWorkouts');
            var workoutCards = Array.from(allWorkoutsSection.getElementsByClassName('workout-card'));

            // Shuffle the array of workout cards using Fisher-Yates algorithm
            for (var i = workoutCards.length - 1; i > 0; i--) {
                var j = Math.floor(Math.random() * (i + 1));
                var temp = workoutCards[i];
                workoutCards[i] = workoutCards[j];
                workoutCards[j] = temp;
            }

            // Append the shuffled cards back to the DOM
            workoutCards.forEach(function (card) {
                allWorkoutsSection.appendChild(card);
            });
        }

        // Shuffle the cards once the page finishes loading
        window.addEventListener('load', shuffleWorkoutCards);

        function searchWorkouts() {
            var searchInput = document.getElementById('searchInput');
            var filter = searchInput.value.toLowerCase();

            var allWorkoutsSection = document.getElementById('allWorkouts');
            var workoutCards = allWorkoutsSection.getElementsByClassName('workout-card');

            var searchResultsSection = document.getElementById('searchResults');
            var searchResultsWorkouts = document.getElementById('searchResultsWorkouts');
            searchResultsWorkouts.innerHTML = ''; // Clear previous search results

            var resultsCount = 0;

            if (filter.trim() === '') {
                searchResultsSection.style.display = 'none';

                for (var i = 0; i < workoutCards.length; i++) {
                    var workoutCard = workoutCards[i];
                    workoutCard.style.display = 'block';
                }

                adjustLayout();
                filterInfo.style.display = 'none';
                return;
            }

            for (var i = 0; i < workoutCards.length; i++) {
                var workoutCard = workoutCards[i];
                var workoutName = workoutCard.querySelector('.card-title').textContent.toLowerCase();
                var displayCard = workoutName.includes(filter);

                workoutCard.style.display = displayCard ? 'none' : 'block'; 

                if (displayCard) {
                    resultsCount++;

                    var clonedCard = workoutCard.cloneNode(true);
                    clonedCard.style.display = 'block';
                    searchResultsWorkouts.appendChild(clonedCard);
                }
            }

            searchResultsSection.style.display = resultsCount > 0 ? 'block' : 'none';
            adjustLayout();
            filterInfo.style.display = 'none';
        }

      function updateSearchResults() {
        var searchInput = document.getElementById('searchInput').value.trim();
        var clearButton = document.getElementById('clearButton');
        var searchResultsSection = document.getElementById('searchResults');
        var searchResultsWorkouts = document.getElementById('searchResultsWorkouts');
        var allWorkoutsSection = document.getElementById('allWorkouts');
        var workoutCards = allWorkoutsSection.getElementsByClassName('workout-card');
        var noResultsMessage = document.getElementById('noResultsMessage');

        clearButton.style.display = searchInput.length > 0 ? 'block' : 'none';

        if (searchInput.length > 0) {
            adjustLayout();
            searchResultsSection.style.display = 'block';
            searchResultsWorkouts.innerHTML = '';

            var resultsFound = false;
            for (var i = 0; i < workoutCards.length; i++) {
                var workoutCard = workoutCards[i];
                var workoutName = workoutCard.querySelector('.card-title').textContent.toLowerCase();
                var displayCard = workoutName.includes(searchInput);

                if (displayCard) {
                    var clonedCard = workoutCard.cloneNode(true);
                    clonedCard.style.display = 'block';
                    searchResultsWorkouts.appendChild(clonedCard);
                    resultsFound = true;
                }
            }

            noResultsMessage.style.display = resultsFound ? 'none' : 'block';
        } else {
            searchResultsSection.style.display = 'none';
            noResultsMessage.style.display = 'none';
        }
      }


        function clearSearch() {
            var searchInput = document.getElementById('searchInput');
            searchInput.value = ''; 
            updateSearchResults(); 
        }
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var calendarEl = document.getElementById('calendar');

            var calendar = new FullCalendar.Calendar(calendarEl, {
                initialView: 'dayGridMonth',
                headerToolbar: {
                    left: 'prev,next',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay'
                },
                events: '/Workout/GetUserCalendarEvents',
                eventClick: function (info) {
                    if (info.event.id) {
                        // Redirect to Details page 
                        window.location.href = '/Workout/Details/' + info.event.id;
                    }
                },
                eventMouseEnter: function (info) {
                    var tooltip = document.createElement('div');
                    tooltip.className = 'event-tooltip';

                    var notes = info.event.extendedProps.notes;

                    if (notes) {
                        tooltip.innerHTML = '<strong>' + info.event.title + '</strong><br>' +
                            'Start: ' + info.event.start.toLocaleString() + '<br>' +
                            'Notes: ' + notes;
                    } else {
                        tooltip.innerHTML = '<strong>' + info.event.title + '</strong><br>' +
                            'Start: ' + info.event.start.toLocaleString();
                    }

                    tooltip.style.left = info.jsEvent.pageX + 'px';
                    tooltip.style.top = info.jsEvent.pageY + 'px';

                    document.body.appendChild(tooltip);
                },
                eventMouseLeave: function () {
                    var tooltip = document.querySelector('.event-tooltip');
                    if (tooltip) {
                        document.body.removeChild(tooltip);
                    }
                }

            });
            calendar.render();
        });
    </script>

</body>

</html>